# Name: Abrar Mojahid Rafi
# ID: 22101593
# Section: 03
# Lab No: 04 



class Node:
  def __init__(self, e, n, p):
    self.element = e
    self.next = n
    self.prev = p 


class DoublyList:
  
  def __init__(self, a):
  #  Design the constructor based on data type of a. If 'a' is built in python list then
  #  Creates a linked list using the values from the given array.
    self.head = None
    # To Do
    self.head = Node(None, None, None)
    n=Node(a[0], self.head, self.head)
    self.head.next=n
    self.head.prev=n
    for i in range(1, len(a)):
      new_N=Node(a[i], None, None)
      new_N.next=self.head
      new_N.prev=self.head.prev
      self.head.prev.next=new_N
      self.head.prev=new_N
    #pass # Remove this line
  
  # Counts the number of Nodes in the list
  def countNode(self):
    # To Do
    cn=self.head.next
    count=0
    while (cn != self.head):
      count+=1
      cn=cn.next
    return count
    #pass # Remove this line
  
  # prints the elements in the list
  def forwardprint(self):
    # To Do
    cn=self.head.next
    while (cn != self.head):
      if cn!=self.head.prev:
        print(cn.element, end=",")
      else:
        print(cn.element)
      cn=cn.next
    #pass # Remove this line

  # prints the elements in the list backward
  def backwardprint(self):
    # To Do
    cn=self.head.prev
    while (cn != self.head):
      if cn!=self.head.next:
        print(cn.element, end=",")
      else:
        print(cn.element)
      cn=cn.prev
    #pass # Remove this line

  # returns the reference of the at the given index. For invalid index return None.
  def nodeAt(self, idx):
    # To Do
    if idx >= 0:
      cn=self.head.next
      count=0
      while (cn!=self.head):
        if count == idx:
          return cn
        count+=1
        cn=cn.next
    else:
      return None
    #pass # Remove this line
  
  # returns the index of the containing the given element. if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    # To Do
    flag=False
    cn=self.head.next
    count=0
    while (cn!=self.head):
      if cn.element==elem:
        flag=True
        break
      count+=1
      cn=cn.next
    
    if flag == True:
      return count
    else:
      return -1
    #pass # Remove this line

  # inserts containing the given element at the given index Check validity of index. 
  def insert(self, elem, idx):
    # To Do
    createObject=Node(elem, None, None)
    if idx==0:
      createObject.next=self.head.next
      self.head.next.prev=createObject
      createObject.prev=self.head
      self.head.next=createObject
    elif idx==self.countNode():
      lastNode=self.nodeAt(idx-1)
      lastNode.next=createObject
      createObject.prev=lastNode
      createObject.next=self.head
      self.head.prev=createObject
    else:
      tempNextNode=self.nodeAt(idx)
      tempPrevNode=self.nodeAt(idx-1)

      tempNextNode.prev=createObject
      createObject.next=tempNextNode
      tempPrevNode.next=createObject
      createObject.prev=tempPrevNode
    #pass # Remove this line
  # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
  def remove(self, idx):
    # To Do
    if idx==0:
      revNode=self.head.next
      self.head.next.next.prev=self.head
      self.head.next=self.head.next.next 
      return str(revNode.element)
    elif idx==self.countNode()-1:
      revNode=self.nodeAt(idx)
      temp=self.nodeAt(idx-1)
      temp.next=self.head
      self.head.prev=temp
      return str(revNode.element)
    else:
      revNode = self.nodeAt(idx)
      temp1stNode = self.nodeAt(idx-1)
      temp2ndNode = self.nodeAt(idx+1)
      temp1stNode.next=temp2ndNode
      temp2ndNode.prev=temp1stNode
      return str(revNode.element)
    #pass # Remove this line




########################################################
################### Driver Code ########################

print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array

h1.forwardprint() # This should print: 10,20,30,40. 
h1.backwardprint() # This should print: 40,30,20,10. 
print(h1.countNode()) # This should print: 4

print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that 
#doesn't exists in the list this will print -1.

print("///  Test 04  ///")

a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40.  

# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40. 
h2.backwardprint() # This should print: 40,30,20,10,85.

print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40.  
h2.backwardprint() # This should print: 40,30,95,20,10,80.  

print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75. 
h2.backwardprint() # This should print: 75,40,30,95,20,10,85. 


print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  

# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70.  
h3.backwardprint() # This should print: 70,60,50,40,30,20.  
print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70.  
h3.backwardprint() # This should print: 70,60,40,30,20.  
print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60. 
h3.backwardprint() # This should print: 60,40,30,20.